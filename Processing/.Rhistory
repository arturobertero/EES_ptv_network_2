} else {
ptv_gap <- NA
}
# Compute Affective Polarization (AP) - Wagner's Mean-Distance Formula
if (length(ptv_scores) >= 2) {
like_max <- max(ptv_scores, na.rm = TRUE)  # Identify most liked party score
n_p <- length(ptv_scores) - 1  # Number of other parties
ap <- sqrt(sum((ptv_scores - like_max)^2) / n_p)  # Wagner's formula
} else {
ap <- NA
}
return(c(ptv_gap, ap))
}
# Apply function to dataset
data <- data %>%
mutate(
PTV_Gap = map_dbl(split(., seq(nrow(.))), ~ compute_ptv_measures(.x)[1]),
AP = map_dbl(split(., seq(nrow(.))), ~ compute_ptv_measures(.x)[2])
)
# Ensure numeric format
data <- data %>%
mutate(PTV_Gap = as.numeric(PTV_Gap),
AP = as.numeric(AP))
# Check summary statistics
summary(data$PTV_Gap)
summary(data$AP)
summary(data$Mean_Constraint)
# Center Important variables
data <- data %>%
group_by(country_year) %>%
mutate(Mean_Constraint_Centered = Mean_Constraint - mean(Mean_Constraint, na.rm = TRUE),
PTV_Gap_Centered = PTV_Gap - mean(PTV_Gap, na.rm = TRUE),
AP_Centered = AP - mean(AP, na.rm = TRUE)) %>%
ungroup()
names(data)
# Compute n_PTV: count valid PTVs per individual
data <- data %>%
rowwise() %>%
mutate(n_PTV = sum(!is.na(c_across(starts_with("t_var_ptv"))))) %>%
ungroup()
data %>%
select(country_year, n_PTV) %>%
distinct() %>%
arrange(country_year) %>%
print(n = Inf)
table(data$country_year)
table(data$country_year, data$n_PTV)
library("pacman")
p_load(tidyverse, here, haven, countrycode, vdemdata, psych, lavaan, ltm,
janitor, conflicted, stringr, readxl, openxlsx)
#conflicts
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
# import DV
DV = read_rds(here("Input", "models", "EES_constraint.rds"))
# Append BEL cases
# 1989
DV[["1989"]][["BEL"]] <- bind_rows(DV[["1989"]][["BEL"]], DV[["1989"]][["XXX"]])
DV[["1989"]][["XXX"]] <- NULL
# 1994
DV[["1994"]][["BEL"]] <- bind_rows(DV[["1994"]][["BEL"]], DV[["1994"]][["XXX"]])
DV[["1994"]][["XXX"]] <- NULL
# 1999
DV[["1999"]][["BEL"]] <- bind_rows(DV[["1999"]][["BEL"]], DV[["1999"]][["XXX"]])
DV[["1999"]][["XXX"]] <- NULL
# 2009
DV[["2009"]][["BEL"]] <- bind_rows(DV[["2009"]][["BEL"]], DV[["2009"]][["XXX"]])
DV[["2009"]][["XXX"]] <- NULL
# 2014
DV[["2014"]][["BEL"]] <- bind_rows(DV[["2014"]][["BEL"]], DV[["2014"]][["XXX"]])
DV[["2014"]][["XXX"]] <- NULL
# 2019
DV[["2019"]][["BEL"]] <- bind_rows(DV[["2019"]][["BEL"]], DV[["2019"]][["XXX"]])
DV[["2019"]][["XXX"]] <- NULL
#calculate true N per wave
# Function to calculate total rows for each country within a year
calculate_total_rows_per_country <- function(year_list) {
map_dbl(year_list, nrow) %>% tibble(Country = names(.), N = .)
}
# Apply function to all years and bind results
total_rows_long <- map_dfr(DV, calculate_total_rows_per_country, .id = "Year")
# Reshape the data to have countries as rows and years as columns
total_rows_wide <- total_rows_long %>%
pivot_wider(names_from = Year, values_from = N, values_fill = 0)  # Fill missing values with 0
# Print final table
print(total_rows_wide)
#import IVs
age_d = read_rds(here("Input", "final_data", "IV", "age_d_long.rds"))
alt_inf = read_rds(here("Input", "final_data", "IV", "alt_inf_long.rds"))
educ = read_rds(here("Input", "final_data", "IV", "educ_long.rds"))
ideol = read_rds(here("Input", "final_data", "IV", "ideol_long.rds"))
mass_mob = read_rds(here("Input", "final_data", "IV", "mass_mob_long.rds"))
p_inst_k = read_rds(here("Input", "final_data", "IV", "p_inst_k_long.rds"))
p_inst = read_rds(here("Input", "final_data", "IV", "p_inst_long.rds"))
pint = read_rds(here("Input", "final_data", "IV", "pint_long.rds"))
pola = read_rds(here("Input", "final_data", "IV", "pola_long.rds"))
turnout = read_rds(here("Input", "final_data", "IV", "turnout_long.rds"))
IHDI = read_rds(here("Input", "final_data", "IV", "IHDI_long.rds"))
ENEP = read_rds(here("Input", "final_data", "IV", "ENEP_long.rds"))
gallagher = read_rds(here("Input", "final_data", "IV", "gallagher_long.rds"))
aff_pola = read_rds(here("Input", "final_data", "IV", "aff_pola_long.rds"))
#Import IDEA data for national turnout and mandatory voting
#turnout_idea = read_xlsx(here("Input", "data", "idea.xlsx")) %>%
#  select(ISO3, Election_Type, Year, Voter_Turnout, mand) %>%
#  filter(ISO3 %in% final$country) %>%
#  filter(Election_Type == "Parliamentary") %>%
#  rename(turnout_nat = Voter_Turnout) %>%
#  mutate(Year = substr(Year, 1, 4), #preserve years only
#         Year = as.numeric(Year),
#         country_year = paste(ISO3, Year, sep = "_"))
#export data
#write.xlsx(turnout_idea, file = here("Input", "data", "idea2.xlsx"))
#import corrected IDEA data (each election year is recoded with the closes
#value of the EU elections. e.g.: elction happend in 2010, is recoded to 2009)
turnout_idea = read_xlsx(here("Input", "data", "idea2.xlsx")) %>%
mutate(country_year = paste(ISO3, Year, sep = "_"),
turnout_nat = as.numeric(gsub("%", "", turnout_nat)),
mand = ifelse(mand == "No", 0, ifelse(mand == "Yes", 1, mand))) %>%
select(ISO3, Year, country_year, turnout_nat, mand) %>%
rename(country = ISO3, year = Year)
# gdp
gdp = read_csv(here("Input", "data", "gdp.csv"))
gdp$`Country or Area` = countrycode(gdp$`Country or Area`, "country.name", "iso3c")
# Extract unique country ISO codes from DV
iso_codes_in_DV <- unique(unlist(map(DV, names)))
# Filter GDP data to include only countries in DV
gdp_filtered <- gdp %>%
filter(`Country or Area` %in% iso_codes_in_DV) %>%
rename(country = `Country or Area`, year = Year) %>%  # Standardize variable names
mutate(country_year = paste0(country, "_", year)) # Create merging key
# rename and select
gdp = gdp_filtered %>%
rename(gdp = Value) %>%
select(country, year, country_year, gdp)
# inflation
infla = read_excel(here("Input", "data", "infla.xlsx"))
# Convert country names to ISO3 codes
infla <- infla %>%
mutate(country = countrycode(`Country Name`, "country.name", "iso3c"))
# Extract unique country ISO codes from DV
iso_codes_in_DV <- unique(unlist(map(DV, names)))
# Filter only relevant countries
infla_filtered <- infla %>%
filter(country %in% iso_codes_in_DV) %>%
select(country, matches("^\\d{4}")) %>%  # Select only columns that start with 4-digit years
pivot_longer(cols = -country, names_to = "year", values_to = "inflation") %>%  # wide to long
mutate(
year = as.integer(str_extract(year, "\\d{4}")),  # Extract only the 4-digit year
country_year = paste0(country, "_", year)  #merging key
)
# Function to remove labels from all variables in a dataset
zap_labels_from_df <- function(df) {
df %>% mutate(across(everything(), haven::zap_labels))
}
# Create a cleaned version of DV without modifying the original list
DV_clean <- map(DV, function(year_data) {
map(year_data, zap_labels_from_df)
})
# Flatten DV_clean into long format
DV_long <- map_dfr(names(DV_clean), function(year) {
map_dfr(names(DV_clean[[year]]), function(country) {
DV_clean[[year]][[country]] %>%
mutate(
year = as.integer(year),
country = country,
country_year = paste0(country, "_", year)
)
})
})
# List of country-year datasets (keeping only relevant columns)
country_data_list <- list(
age_d %>% select(country_year, age_d),
alt_inf %>% select(country_year, alt_inf),
educ %>% select(country_year, educ),
ideol %>% select(country_year, ideol),
mass_mob %>% select(country_year, mass_mob),
p_inst_k %>% select(country_year, p_inst_k),
p_inst %>% select(country_year, p_inst),
pint %>% select(country_year, pint),
pola %>% select(country_year, pola),
turnout %>% select(country_year, turnout),
IHDI %>% select(country_year, ihdi),
ENEP %>% select(country_year, ENEP),
gallagher %>% select(country_year, gallagher),
gdp %>% select(country_year, gdp),
infla_filtered %>% select(country_year, inflation),
turnout_idea %>% select(country_year, turnout_nat, mand),
aff_pola %>% select(country_year, PAP_partisans, PAP_electorate, LAP_partisans, LAP_electorate)
)
# Merge all datasets, ensuring only country-year is retained for joining
final_data <- reduce(country_data_list, full_join, by = "country_year")
# Merge with individual-level data (DV_long)
final_data <- left_join(DV_long, final_data, by = "country_year")
# Remove redundant columns: country and year duplicates
final_data <- final_data %>%
select(-matches("^country(\\.x|\\.y|\\.x\\.x|\\.y\\.y|\\.x\\.x\\.x|\\.y\\.y\\.y)+$"),
-matches("^year(\\.x|\\.y|\\.x\\.x|\\.y\\.y|\\.x\\.x\\.x|\\.y\\.y\\.y)+$"))
# Check names
names(final_data)
# new, final name
data = final_data
# Rearrange order ot PTVs
ptv_vars <- names(data)[grepl("^t_var_ptv_party\\d+$", names(data))]
# Extract numeric part and sort them numerically
ptv_vars <- ptv_vars[order(as.numeric(str_extract(ptv_vars, "\\d+")))]
# Identify non-PTV variables
non_ptv_vars <- setdiff(names(data), ptv_vars)
# Reorder dataset: Non-PTV variables first, PTV variables last (sorted numerically)
data <- data %>%
select(all_of(non_ptv_vars), all_of(ptv_vars))
# vote_choice as dummy
data <- data %>%
mutate(vote_choice = ifelse(vote_choice == 0, 0, 1),
vote_choice = factor(vote_choice, levels = c(0, 1), labels = c("No Vote", "Vote")))
# party id
data <- data %>%
mutate(part_id = ifelse(part_id < 0, NA, part_id))
# variable type
data <- data %>%
mutate(
vote = factor(vote, levels = c(0, 1), labels = c("No Vote", "Vote")),
sex = factor(sex, levels = c(1, 2), labels = c("Male", "Female")),
partisan = factor(partisan, levels = c(0, 1), labels = c("Non-Partisan", "Partisan")),
mand = factor(mand, levels = c(0, 1), labels = c("No", "Yes")),
year = as.integer(year),
yb = as.integer(yb),
class = as.integer(class),
Mean_Constraint = as.numeric(Mean_Constraint),
lr = as.numeric(lr),
pol_int = as.numeric(pol_int),
part_id = as.numeric(part_id),
age_d = as.numeric(age_d),
alt_inf = as.numeric(alt_inf),
educ = as.numeric(educ),
ideol = as.numeric(ideol),
mass_mob = as.numeric(mass_mob),
p_inst = as.numeric(p_inst),
pint = as.numeric(pint),
pola = as.numeric(pola),
turnout = as.numeric(turnout),
ihdi = as.numeric(ihdi),
ENEP = as.numeric(ENEP),
gallagher = as.numeric(gallagher),
gdp = as.numeric(gdp),
inflation = as.numeric(inflation),
turnout_nat = as.numeric(turnout_nat),
PAP_partisans = as.numeric(PAP_partisans),
LAP_partisans = as.numeric(LAP_partisans),
PAP_electorate = as.numeric(PAP_electorate),
LAP_electorate = as.numeric(LAP_electorate)
)
# Create AP and PTV_GAP
# PTV_GAP = delta in preferences: Max - Second Max PTV
# AP = spread of party preferences: average absolute party score relative to average party score
# Function to compute PTV_Gap and AP
compute_ptv_measures <- function(ptv_row) {
# Extract valid PTV scores (0-10)
ptv_scores <- as.numeric(ptv_row[grepl("^t_var_ptv_party\\d+$", names(ptv_row))])
ptv_scores <- ptv_scores[!is.na(ptv_scores) & ptv_scores >= 0 & ptv_scores <= 10]
# Compute PTV_Gap (Max - Second Max)
if (length(ptv_scores) >= 2) {
sorted_scores <- sort(ptv_scores, decreasing = TRUE)
ptv_gap <- sorted_scores[1] - sorted_scores[2]
} else {
ptv_gap <- NA
}
# Compute Affective Polarization (AP) - Wagner's Mean-Distance Formula
if (length(ptv_scores) >= 2) {
like_max <- max(ptv_scores, na.rm = TRUE)  # Identify most liked party score
n_p <- length(ptv_scores) - 1  # Number of other parties
ap <- sqrt(sum((ptv_scores - like_max)^2) / n_p)  # Wagner's formula
} else {
ap <- NA
}
return(c(ptv_gap, ap))
}
# Apply function to dataset
data <- data %>%
mutate(
PTV_Gap = map_dbl(split(., seq(nrow(.))), ~ compute_ptv_measures(.x)[1]),
AP = map_dbl(split(., seq(nrow(.))), ~ compute_ptv_measures(.x)[2])
)
# Ensure numeric format
data <- data %>%
mutate(PTV_Gap = as.numeric(PTV_Gap),
AP = as.numeric(AP))
# Check summary statistics
summary(data$PTV_Gap)
summary(data$AP)
summary(data$Mean_Constraint)
# Center Important variables
data <- data %>%
group_by(country_year) %>%
mutate(Mean_Constraint_Centered = Mean_Constraint - mean(Mean_Constraint, na.rm = TRUE),
PTV_Gap_Centered = PTV_Gap - mean(PTV_Gap, na.rm = TRUE),
AP_Centered = AP - mean(AP, na.rm = TRUE)) %>%
ungroup()
# Compute n_PTV: count valid PTVs per individual
data <- data %>%
rowwise() %>%
mutate(n_PTV = sum(!is.na(c_across(starts_with("t_var_ptv"))))) %>%
ungroup()
saveRDS(data, here("Input", "final_data", "final.rds"))
knitr::opts_chunk$set(echo = FALSE, error = FALSE, message = FALSE, warning = FALSE)
library("pacman")
p_load(tidyverse, here, haven, countrycode, vdemdata, psych, lavaan, ltm, patchwork,
kableExtra, lme4, lmerTest, conflicted, stringr, sjPlot)
#conflicts
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
# import final data
data = read_rds(here("Input", "final_data", "final.rds"))
# Check cors
# Standard Pearson Correlations (ignores multilevel structure)
cor_matrix <- data %>%
select(Mean_Constraint, PTV_Gap, AP) %>%
cor(use = "pairwise.complete.obs")
print(cor_matrix)
# Check variable types
str(data)
# Check factors
table(data$vote, useNA = "always")
table(data$vote_choice, useNA = "always")
table(data$sex, useNA = "always")
table(data$partisan, useNA = "always")
# General summary
summary(data)
# # Center Important variables
# data <- data %>%
#   group_by(country_year) %>%
#   mutate(Mean_Constraint_Centered = Mean_Constraint - mean(Mean_Constraint, na.rm = TRUE),
#          PTV_Gap_Centered = PTV_Gap - mean(PTV_Gap, na.rm = TRUE),
#          AP_Centered = AP - mean(AP, na.rm = TRUE)) %>%
#   ungroup()
# # Compute n_PTV: count valid PTVs per individual
# data <- data %>%
#   rowwise() %>%
#   mutate(n_PTV = sum(!is.na(c_across(starts_with("t_var_ptv"))))) %>%
#   ungroup()
# Cross tab country_year and n_ptv (count of valid ptv items)
table(data$country_year, data$n_PTV)
# Cross tab country_year and ENEP
table(data$country_year, data$ENEP)
# Cross tab country_year and ENEP
table(data$ENEP, data$country_year)
# Cross tab country_year and ENEP
table(data$country_year, data$ENEP)
# Fit a logistic multilevel model with random intercepts
m1 <- glmer(vote ~ Mean_Constraint_Centered + (1 | country_year),
data = data,
family = binomial())
#summary(m1)
# sjPlot
tab_model(m1, show.re.var = TRUE,
show.icc = TRUE,
show.aic = TRUE,
dv.labels = "Predicting Vote (Multilevel Model)",
title = "Logistic Multilevel Model Predicting Vote")
summary(m1)
m2 <- glmer(vote ~ Mean_Constraint_Centered + PTV_Gap_Centered + AP_Centered + (1 | country_year),
data = data,
family = binomial())
# Ensure all models use the same data subset
data_model <- data %>%
filter(!is.na(PTV_Gap_Centered) &
!is.na(AP_Centered) &
!is.na(Mean_Constraint_Centered))
# Fit models using the same dataset
#m1_null
m1_null <- glmer(vote ~ (1 | country_year),
data = data_model,
family = binomial())
#summary(m1_null)
#m2_ptv
m2_ptv <- glmer(vote ~ PTV_Gap_Centered + AP_Centered + (1 | country_year),
data = data_model,
family = binomial())
#summary(m2_ptv)
#m3_full
m3_full <- glmer(vote ~ Mean_Constraint_Centered + PTV_Gap_Centered + AP_Centered + (1 | country_year),
data = data_model,
family = binomial())
#summary(m3_full)
#list of models
list_m = list(m1_null, m2_ptv, m3_full)
# sjPlot
tab_model(list_m, show.re.var = TRUE,
show.icc = TRUE,
show.aic = TRUE,
dv.labels = "Predicting Vote (Multilevel Model)",
title = "Logistic Multilevel Model Predicting Vote")
summary(m3_full)
# Compare models using AIC/BIC
model_comparison <- data.frame(
Model = c("Null Model", "PTV-Based Measures", "Full Model (Mean Constraint)"),
AIC = c(AIC(m1_null), AIC(m2_ptv), AIC(m3_full)),
BIC = c(BIC(m1_null), BIC(m2_ptv), BIC(m3_full)),
LogLikelihood = c(logLik(m1_null), logLik(m2_ptv), logLik(m3_full))
)
print(model_comparison)
# Likelihood Ratio Tests
anova(m1_null, m2_ptv, m3_full, test = "Chisq")
# Compare models using AIC/BIC
model_comparison <- data.frame(
Model = c("Null Model", "PTV-Based Measures", "Full Model (Mean Constraint)"),
AIC = c(AIC(m1_null), AIC(m2_ptv), AIC(m3_full)),
BIC = c(BIC(m1_null), BIC(m2_ptv), BIC(m3_full)),
LogLikelihood = c(logLik(m1_null), logLik(m2_ptv), logLik(m3_full))
)
print(model_comparison)
# Likelihood Ratio Tests
anova(m1_null, m2_ptv, m3_full, test = "Chisq")
names(data)
m4_controls <- glmer(
vote ~ Mean_Constraint_Centered + PTV_Gap_Centered + AP_Centered +
pol_int + partisan + sex + yb + class +  # Individual-level
ENEP + inflation + mand +                # Country-level
(1 | country_year),                      # Random intercept per country-year
data = data,
family = binomial()
)
summary(m4_controls)
# exclude belgium to avoid convergence problems
data_m5 = data %>%
filter(country!= "BEL")
m5_nptv <- glmer(
vote ~ Mean_Constraint_Centered + PTV_Gap_Centered + AP_Centered +
pol_int + partisan + sex + yb + class +  # Individual-level
n_PTV + inflation + mand +                # Country-level
(1 | country_year),                      # Random intercept per country-year
data = data_m5,
family = binomial()
)
m4_controls <- glmer(
vote ~ Mean_Constraint_Centered +
pol_int + partisan + sex + yb + class +  # Individual-level
ENEP + inflation + mand +                # Country-level
(1 | country_year),                      # Random intercept per country-year
data = data,
family = binomial()
)
# Model
m4_controls <- glmer(
vote ~ Mean_Constraint_Centered +
pol_int + partisan + sex + yb + class +  # Individual-level
ENEP + inflation + mand +                # Country-level
(1 | country_year),                      # Random intercept per country-year
data = data,
family = binomial()
)
data <- data %>%
mutate(yb_scaled = yb - mean(yb, na.rm = TRUE))
# Model
m4_controls <- glmer(
vote ~ Mean_Constraint_Centered +
pol_int + partisan + sex + yb + class +  # Individual-level
ENEP + inflation + mand +                # Country-level
(1 | country_year),                      # Random intercept per country-year
data = data,
family = binomial()
)
#summary(m4_controls)
# tab model
tab_model(m4_controls, show.re.var = TRUE,
show.icc = TRUE,
show.aic = TRUE,
dv.labels = "Predicting Vote (Multilevel Model)",
title = "Logistic Multilevel Model Predicting Vote")
summary(m4_controls)
vif(m4_controls)
p_load(tidyverse, here, haven, countrycode, vdemdata, psych, lavaan, ltm, patchwork,
kableExtra, lme4, lmerTest, conflicted, stringr, sjPlot, car)
vif(m4_controls)
# Model
m4_controls <- glmer(
vote ~ Mean_Constraint_Centered +
pol_int + partisan + sex + yb_scaled + class +  # Individual-level
ENEP + inflation + mand +                # Country-level
(1 | country_year),                      # Random intercept per country-year
data = data,
family = binomial()
)
#summary(m4_controls)
# tab model
tab_model(m4_controls, show.re.var = TRUE,
show.icc = TRUE,
show.aic = TRUE,
dv.labels = "Predicting Vote (Multilevel Model)",
title = "Logistic Multilevel Model Predicting Vote")
summary(m4_controls)
# exclude belgium to avoid convergence problems
data_m5 = glmer(
vote ~ Mean_Constraint_Centered +
pol_int + partisan + sex + yb_scaled + class +  # Individual-level
n_PTV + inflation + mand +                # Country-level
(1 | country_year),                      # Random intercept per country-year
data = data,
family = binomial()
)
data_m5 = data %>%
filter(country != "BEL")
# exclude belgium to avoid convergence problems
data_m5 = glmer(
vote ~ Mean_Constraint_Centered +
pol_int + partisan + sex + yb_scaled + class +  # Individual-level
n_PTV + inflation + mand +                # Country-level
(1 | country_year),                      # Random intercept per country-year
data = data_m5,
family = binomial()
)
summary(m5_nptv)
summary(data_m5)
