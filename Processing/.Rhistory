}
#Apply the function to all key PTV measures
data <- rescale_and_center(data, "Mean_Constraint")
data <- rescale_and_center(data, "PTV_Gap")
data <- rescale_and_center(data, "AP")
data <- rescale_and_center(data, "DIFF_SD")
data <- rescale_and_center(data, "PTV_SD")
data <- rescale_and_center(data, "PTV_M")
names(data)
knitr::opts_chunk$set(echo = TRUE, error = FALSE, message = FALSE, warning = FALSE)
library("pacman")
p_load(tidyverse, here, haven, countrycode, vdemdata, psych, lavaan, ltm, patchwork,
kableExtra, lme4, lmerTest, conflicted, stringr, sjPlot, car)
#conflicts
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
# import final data
data = read_rds(here("Input", "final_data", "final.rds"))
# Check cors
# Standard Pearson Correlations (ignores multilevel structure)
cor_matrix <- data %>%
select(Mean_Constraint, PTV_Gap, AP, DIFF_SD, PTV_SD, PTV_M) %>%
cor(use = "pairwise.complete.obs")
print(cor_matrix)
# Check variable types
#str(data)
# Check factors
table(data$vote, useNA = "always")
table(data$vote_choice, useNA = "always")
table(data$sex, useNA = "always")
table(data$partisan, useNA = "always")
# General summary
#summary(data)
# Function to rescale and center numeric variables within country_year
rescale_and_center <- function(data, var_name) {
if (var_name %in% names(data) && is.numeric(data[[var_name]])) {
# Rescale to 0-1
data <- data %>%
mutate(!!sym(var_name) := (get(var_name) - min(get(var_name), na.rm = TRUE)) /
(max(get(var_name), na.rm = TRUE) - min(get(var_name), na.rm = TRUE)))
# Center within country_year
data <- data %>%
group_by(country_year) %>%
mutate(!!sym(paste0(var_name, "_centered")) := get(var_name) - mean(get(var_name), na.rm = TRUE)) %>%
ungroup()
} else {
message(paste("Skipping:", var_name, "- Not a numeric variable"))
}
return(data)
}
#Apply the function to all key PTV measures
data <- rescale_and_center(data, "Mean_Constraint")
data <- rescale_and_center(data, "PTV_Gap")
data <- rescale_and_center(data, "AP")
data <- rescale_and_center(data, "DIFF_SD")
data <- rescale_and_center(data, "PTV_SD")
data <- rescale_and_center(data, "PTV_M")
# Fit a logistic multilevel model with random intercepts
m1 <- glmer(vote ~ Mean_Constraint_centered + (1 | country_year),
data = data,
family = binomial())
m2 <- glmer(vote ~ PTV_Gap_centered + (1 | country_year),
data = data,
family = binomial())
m3 <- glmer(vote ~ AP_centered + (1 | country_year),
data = data,
family = binomial())
m4 <- glmer(vote ~ DIFF_SD_centered + (1 | country_year),
data = data,
family = binomial())
m5 <- glmer(vote ~ PTV_SD_centered + (1 | country_year),
data = data,
family = binomial())
m6 <- glmer(vote ~ PTV_M_centered + (1 | country_year),
data = data,
family = binomial())
#list of models
m_list = list(m1, m2, m3, m4, m5, m6)
# sjPlot
tab_model(m_list, show.re.var = TRUE,
show.icc = TRUE,
show.aic = TRUE,
dv.labels = "Predicting Vote (Multilevel Model)",
title = "Logistic Multilevel Model Predicting Vote")
# Ensure all models use the same data subset
data_1 <- data %>%
select(Mean_Constraint, PTV_Gap, AP, DIFF_SD, PTV_SD, PTV_M) %>%
na.omit()
# Fit a logistic multilevel model with random intercepts
m1 <- glmer(vote ~ Mean_Constraint_centered + (1 | country_year),
data = data_1,
family = binomial())
# Ensure all models use the same data subset
data_1 <- data %>%
select(vote, Mean_Constraint, PTV_Gap, AP, DIFF_SD, PTV_SD, PTV_M) %>%
na.omit()
# Fit a logistic multilevel model with random intercepts
m1 <- glmer(vote ~ Mean_Constraint_centered + (1 | country_year),
data = data_1,
family = binomial())
# Ensure all models use the same data subset
data_1 <- data %>%
select(vote, Mean_Constraint_centered, PTV_Gap_centered, AP_centered, DIFF_SD_centered,
PTV_SD_centered, PTV_M_centered) %>%
na.omit()
# Fit a logistic multilevel model with random intercepts
m1 <- glmer(vote ~ Mean_Constraint_centered + (1 | country_year),
data = data_1,
family = binomial())
# Ensure all models use the same data subset
data_1 <- data %>%
select(vote,  country_year, Mean_Constraint_centered, PTV_Gap_centered, AP_centered, DIFF_SD_centered,
PTV_SD_centered, PTV_M_centered) %>%
na.omit()
# Fit a logistic multilevel model with random intercepts
m1 <- glmer(vote ~ Mean_Constraint_centered + (1 | country_year),
data = data_1,
family = binomial())
m2 <- glmer(vote ~ PTV_Gap_centered + (1 | country_year),
data = data_1,
family = binomial())
m3 <- glmer(vote ~ AP_centered + (1 | country_year),
data = data_1,
family = binomial())
m4 <- glmer(vote ~ DIFF_SD_centered + (1 | country_year),
data = data_1,
family = binomial())
m5 <- glmer(vote ~ PTV_SD_centered + (1 | country_year),
data = data_1,
family = binomial())
m6 <- glmer(vote ~ PTV_M_centered + (1 | country_year),
data = data_1,
family = binomial())
#list of models
m_list = list(m1, m2, m3, m4, m5, m6)
# sjPlot
tab_model(m_list, show.re.var = TRUE,
show.icc = TRUE,
show.aic = TRUE,
dv.labels = "Predicting Vote (Multilevel Model)",
title = "Logistic Multilevel Model Predicting Vote")
table(data$pol_int)
table(data$partisan)
table(data$sex)
table(data$yb)
table(data$class)
names(data)
data$v225
table(data$country_year, data$educ)
table(data$educ)
table(data$educ, data$country_year)
knitr::opts_chunk$set(echo = TRUE, error = FALSE, message = FALSE, warning = FALSE)
library("pacman")
p_load(tidyverse, here, haven, countrycode, vdemdata, psych, lavaan, ltm, patchwork,
kableExtra, lme4, lmerTest, conflicted, stringr, sjPlot, car)
#conflicts
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
# import final data
data = read_rds(here("Input", "final_data", "final.rds"))
# Check cors
# Standard Pearson Correlations (ignores multilevel structure)
cor_matrix <- data %>%
select(Mean_Constraint, PTV_Gap, AP, DIFF_SD, PTV_SD, PTV_M) %>%
cor(use = "pairwise.complete.obs")
print(cor_matrix)
# Check variable types
#str(data)
# Check factors
table(data$vote, useNA = "always")
table(data$vote_choice, useNA = "always")
table(data$sex, useNA = "always")
table(data$partisan, useNA = "always")
# General summary
#summary(data)
# Function to rescale and center numeric variables within country_year
rescale_and_center <- function(data, var_name) {
if (var_name %in% names(data) && is.numeric(data[[var_name]])) {
# Rescale to 0-1
data <- data %>%
mutate(!!sym(var_name) := (get(var_name) - min(get(var_name), na.rm = TRUE)) /
(max(get(var_name), na.rm = TRUE) - min(get(var_name), na.rm = TRUE)))
# Center within country_year
data <- data %>%
group_by(country_year) %>%
mutate(!!sym(paste0(var_name, "_centered")) := get(var_name) - mean(get(var_name), na.rm = TRUE)) %>%
ungroup()
} else {
message(paste("Skipping:", var_name, "- Not a numeric variable"))
}
return(data)
}
#Apply the function to all key PTV measures
data = rescale_and_center(data, "Mean_Constraint")
data = rescale_and_center(data, "PTV_Gap")
data = rescale_and_center(data, "AP")
data = rescale_and_center(data, "DIFF_SD")
data = rescale_and_center(data, "PTV_SD")
data = rescale_and_center(data, "PTV_M")
# Apply to numeric controls
data = rescale_and_center(data, "pol_int")
data = rescale_and_center(data, "yb")
data = rescale_and_center(data, "class")
# Ensure all models use the same data subset
data_1 <- data %>%
select(vote,  country_year, Mean_Constraint_centered, PTV_Gap_centered, AP_centered, DIFF_SD_centered,
PTV_SD_centered, PTV_M_centered) %>%
na.omit()
# Fit a logistic multilevel model with random intercepts
m1 <- glmer(vote ~ Mean_Constraint_centered + (1 | country_year),
data = data_1,
family = binomial())
m2 <- glmer(vote ~ PTV_Gap_centered + (1 | country_year),
data = data_1,
family = binomial())
m3 <- glmer(vote ~ AP_centered + (1 | country_year),
data = data_1,
family = binomial())
m4 <- glmer(vote ~ DIFF_SD_centered + (1 | country_year),
data = data_1,
family = binomial())
m5 <- glmer(vote ~ PTV_SD_centered + (1 | country_year),
data = data_1,
family = binomial())
m6 <- glmer(vote ~ PTV_M_centered + (1 | country_year),
data = data_1,
family = binomial())
#list of models
m_list = list(m1, m2, m3, m4, m5, m6)
# sjPlot
tab_model(m_list, show.re.var = TRUE,
show.icc = TRUE,
show.aic = TRUE,
dv.labels = "Predicting Vote (Multilevel Model)",
title = "Logistic Multilevel Model Predicting Vote")
# Ensure all models use the same data subset
data_2 <- data %>%
select(vote,  country_year, Mean_Constraint_centered, PTV_Gap_centered, AP_centered, DIFF_SD_centered,
PTV_SD_centered, PTV_M_centered, pol_int_centered, partisan, sex, yb_centered, class_centered) %>%
na.omit()
# Fit a logistic multilevel model with random intercepts
m1_2 <- glmer(vote ~ Mean_Constraint_centered
pol_int_centered + partisan + sex + yb_centered + class_centered +  # Individual-level
names(data_2)
# Ensure all models use the same data subset
data_2 <- data %>%
select(vote,  country_year, Mean_Constraint_centered, PTV_Gap_centered, AP_centered, DIFF_SD_centered,
PTV_SD_centered, PTV_M_centered, pol_int_centered, partisan, sex, yb_centered, class_centered) %>%
na.omit()
# Fit a logistic multilevel model with random intercepts
m1_2 <- glmer(vote ~ Mean_Constraint_centered +
pol_int_centered + partisan + sex + yb_centered + class_centered +  # Individual-level
+ (1 | country_year),
data = data_2,
family = binomial())
m2_2 <- glmer(vote ~ PTV_Gap_centered +
pol_int_centered + partisan + sex + yb_centered + class_centered +  # Individual-level
+ (1 | country_year),
data = data_2,
family = binomial())
m3_2 <- glmer(vote ~ AP_centered +
pol_int_centered + partisan + sex + yb_centered + class_centered +  # Individual-level
+ (1 | country_year),
data = data_2,
family = binomial())
m4_2 <- glmer(vote ~ DIFF_SD_centered +
pol_int_centered + partisan + sex + yb_centered + class_centered +  # Individual-level
+ (1 | country_year),
data = data_2,
family = binomial())
m5_2 <- glmer(vote ~ PTV_SD_centered +
pol_int_centered + partisan + sex + yb_centered + class_centered +  # Individual-level
+ (1 | country_year),
data = data_2,
family = binomial())
m6_2 <- glmer(vote ~ PTV_M_centered +
pol_int_centered + partisan + sex + yb_centered + class_centered +  # Individual-level
+ (1 | country_year),
data = data_2,
family = binomial())
#list of models
m2_list = list(m1_2, m2_2, m3_2, m4_2, m5_2, m6_2)
# sjPlot
tab_model(m2_list, show.re.var = TRUE,
show.icc = TRUE,
show.aic = TRUE,
dv.labels = "Predicting Vote (Multilevel Model)",
title = "Logistic Multilevel Model Predicting Vote, with individual level controls")
table(data$ENEP)
table(data$inflation)
table(data$mand)
data = rescale_and_center(data, "ENEP")
data = rescale_and_center(data, "inflation")
# Ensure all models use the same data subset
data_3 <- data %>%
select(vote, country_year,
Mean_Constraint_centered, PTV_Gap_centered, AP_centered, DIFF_SD_centered,
PTV_SD_centered, PTV_M_centered,
pol_int_centered, partisan, sex, yb_centered, class_centered,  # Individual-level
ENEP_centered, inflation_centered, mand) %>%  # Country-level
na.omit()
# Fit a logistic multilevel model with random intercepts (Baseline with Constraint)
m1_3 <- glmer(vote ~ Mean_Constraint_centered +
pol_int_centered + partisan + sex + yb_centered + class_centered +  # Individual-level
ENEP_centered + inflation_centered + mand +                        # Country-level
(1 | country_year),
data = data_3,
family = binomial())
# PTV Gap Model
m2_3 <- glmer(vote ~ PTV_Gap_centered +
pol_int_centered + partisan + sex + yb_centered + class_centered +  # Individual-level
ENEP_centered + inflation_centered + mand +                        # Country-level
(1 | country_year),
data = data_3,
family = binomial())
# Affective Polarization (AP) Model
m3_3 <- glmer(vote ~ AP_centered +
pol_int_centered + partisan + sex + yb_centered + class_centered +  # Individual-level
ENEP_centered + inflation_centered + mand +                        # Country-level
(1 | country_year),
data = data_3,
family = binomial())
# DIFF_SD Model (Variance in Differences)
m4_3 <- glmer(vote ~ DIFF_SD_centered +
pol_int_centered + partisan + sex + yb_centered + class_centered +  # Individual-level
ENEP_centered + inflation_centered + mand +                        # Country-level
(1 | country_year),
data = data_3,
family = binomial())
# PTV_SD Model (Variance in PTVs)
m5_3 <- glmer(vote ~ PTV_SD_centered +
pol_int_centered + partisan + sex + yb_centered + class_centered +  # Individual-level
ENEP_centered + inflation_centered + mand +                        # Country-level
(1 | country_year),
data = data_3,
family = binomial())
# PTV_M Model (Mean PTV Score)
m6_3 <- glmer(vote ~ PTV_M_centered +
pol_int_centered + partisan + sex + yb_centered + class_centered +  # Individual-level
ENEP_centered + inflation_centered + mand +                        # Country-level
(1 | country_year),
data = data_3,
family = binomial())
# List of models
m3_list = list(m1_3, m2_3, m3_3, m4_3, m5_3, m6_3)
# sjPlot
tab_model(m3_list, show.re.var = TRUE,
show.icc = TRUE,
show.aic = TRUE,
dv.labels = "Predicting Vote (Multilevel Model, Full Controls)",
title = "Logistic Multilevel Model Predicting Vote, with individual and country-level controls")
# Mean Constraint Model with Interaction
m1_3_interaction <- glmer(vote ~ Mean_Constraint_centered * PTV_M_centered +  # Interaction term
pol_int_centered + partisan + sex + yb_centered + class_centered +  # Individual-level
ENEP_centered + inflation_centered + mand +                        # Country-level
(1 | country_year),
data = data_3,
family = binomial())
# PTV_SD Model with Interaction
m5_3_interaction <- glmer(vote ~ PTV_SD_centered * PTV_M_centered +  # Interaction term
pol_int_centered + partisan + sex + yb_centered + class_centered +  # Individual-level
ENEP_centered + inflation_centered + mand +                        # Country-level
(1 | country_year),
data = data_3,
family = binomial())
# List of interaction models
m3_list_interaction <- list(m1_3_interaction, m5_3_interaction)
# sjPlot: Displaying the results in a neat table
tab_model(m3_list_interaction, show.re.var = TRUE,
show.icc = TRUE,
show.aic = TRUE,
dv.labels = "Predicting Vote (Multilevel Model, Interaction Included)",
title = "Logistic Multilevel Model Predicting Vote with Interaction (Constraint × PTV Mean)")
# Mean Constraint Model with Interaction (Mean Constraint × Partisanship)
m1_4_interaction <- glmer(vote ~ Mean_Constraint_centered * partisan +  # Interaction term
pol_int_centered + sex + yb_centered + class_centered +  # Individual-level
ENEP_centered + inflation_centered + mand +              # Country-level
(1 | country_year),
data = data_3,
family = binomial())
# PTV_SD Model with Interaction (PTV_SD × Partisanship)
m5_4_interaction <- glmer(vote ~ PTV_SD_centered * partisan +  # Interaction term
pol_int_centered + sex + yb_centered + class_centered +  # Individual-level
ENEP_centered + inflation_centered + mand +              # Country-level
(1 | country_year),
data = data_3,
family = binomial())
# List of interaction models
m4_list_interaction <- list(m1_4_interaction, m5_4_interaction)
# sjPlot: Displaying the results in a neat table
tab_model(m4_list_interaction, show.re.var = TRUE,
show.icc = TRUE,
show.aic = TRUE,
dv.labels = "Predicting Vote (Multilevel Model, Interaction Included)",
title = "Logistic Multilevel Model Predicting Vote with Interaction (Constraint × Partisanship)")
tab_model(m4_list_interaction, show.re.var = TRUE,
show.icc = TRUE,
show.aic = TRUE,
dv.labels = "Predicting Vote (Multilevel Model, Interaction Included)",
title = "Logistic Multilevel Model Predicting Vote with Interaction (Constraint × Partisanship)")
tab_model(m3_list_interaction, show.re.var = TRUE,
show.icc = TRUE,
show.aic = TRUE,
dv.labels = "Predicting Vote (Multilevel Model, Interaction Included)",
title = "Logistic Multilevel Model Predicting Vote with Interaction (Constraint × PTV Mean)")
# Compare full models using AIC/BIC
model_comparison <- data.frame(
Model = c("Full Model (Mean Constraint)",
"Full Model (Affective Polarization)",
"Full Model (PTV_SD)"),
AIC = c(AIC(m1_3), AIC(m3_3), AIC(m5_3)),
BIC = c(BIC(m1_3), BIC(m3_3), BIC(m5_3)),
LogLikelihood = c(logLik(m1_3), logLik(m3_3), logLik(m5_3))
)
print(model_comparison)
print(model_comparison)
# Likelihood Ratio Tests
anova(m3_3, m1_3, test = "Chisq")  # Mean Constraint vs. Affective Polarization
anova(m3_3, m5_3, test = "Chisq")  # PTV_SD vs. Affective Polarization
p_load(tidyverse, here, haven, countrycode, vdemdata, psych, lavaan, ltm, patchwork,
kableExtra, lme4, lmerTest, conflicted, stringr, sjPlot, car, ggplot2)
# Select
data_subset <- data %>%
select(Mean_Constraint, PTV_Gap, AP, DIFF_SD, PTV_SD, PTV_M) %>%
pivot_longer(everything(), names_to = "Variable", values_to = "Value")
# histograms
p <- ggplot(data_subset, aes(x = Value)) +
geom_histogram(fill = "gray30", color = "black", bins = 30) +
facet_wrap(~Variable, scales = "free") +
theme_minimal() +
labs(title = "Distributions of Key Variables",
x = "Value",
y = "Count")
# Print
print(p)
head(data)
knitr::opts_chunk$set(echo = TRUE, error = FALSE, message = FALSE, warning = FALSE)
library("pacman")
p_load(tidyverse, here, haven, countrycode, vdemdata, psych, lavaan, ltm, patchwork,
kableExtra, lme4, lmerTest, conflicted, stringr, sjPlot, car, ggplot2)
#conflicts
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
# import final data
data = read_rds(here("Input", "final_data", "final.rds"))
# Check cors
# Standard Pearson Correlations (ignores multilevel structure)
cor_matrix <- data %>%
select(Mean_Constraint, PTV_Gap, AP, DIFF_SD, PTV_SD, PTV_M) %>%
cor(use = "pairwise.complete.obs")
print(cor_matrix)
# Select
data_subset <- data %>%
select(Mean_Constraint, PTV_Gap, AP, DIFF_SD, PTV_SD, PTV_M) %>%
pivot_longer(everything(), names_to = "Variable", values_to = "Value")
# histograms
p <- ggplot(data_subset, aes(x = Value)) +
geom_histogram(fill = "gray30", color = "black", bins = 30) +
facet_wrap(~Variable, scales = "free") +
theme_minimal() +
labs(title = "Distributions of Key Variables",
x = "Value",
y = "Count")
# Print
print(p)
# Select variables and include country_year for faceting
data_subset <- data %>%
select(country_year, Mean_Constraint, PTV_Gap, AP, DIFF_SD, PTV_SD, PTV_M) %>%
pivot_longer(cols = -country_year, names_to = "Variable", values_to = "Value")
# Create histograms faceted by country_year
p <- ggplot(data_subset, aes(x = Value)) +
geom_histogram(fill = "gray30", color = "black", bins = 30) +
facet_wrap(~Variable + country_year, scales = "free_y", ncol = 6) +
theme_minimal() +
labs(title = "Distributions of Key Variables by Country-Year",
x = "Value",
y = "Count")
# Print the plot
print(p)
# Aggregate data at the country-year level (taking the mean per country_year)
data_agg <- data %>%
group_by(country_year) %>%
summarize(across(c(Mean_Constraint, PTV_Gap, AP, DIFF_SD, PTV_SD, PTV_M), mean, na.rm = TRUE)) %>%
pivot_longer(cols = -country_year, names_to = "Variable", values_to = "Value")
# Create histograms of country-year aggregated data
p <- ggplot(data_agg, aes(x = Value)) +
geom_histogram(fill = "gray30", color = "black", bins = 30) +
facet_wrap(~Variable, scales = "free") +
theme_minimal() +
labs(title = "Distributions of Key Variables (Aggregated at Country-Year Level)",
x = "Mean Value per Country-Year",
y = "Count")
# Print the plot
print(p)
View(data)
View(data_agg)
knitr::opts_chunk$set(echo = TRUE, error = FALSE, message = FALSE, warning = FALSE)
library("pacman")
p_load(tidyverse, here, haven, countrycode, vdemdata, psych, lavaan, ltm, patchwork,
kableExtra, lme4, lmerTest, conflicted, stringr, sjPlot, car, ggplot2)
#conflicts
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
# import final data
data = read_rds(here("Input", "final_data", "final.rds"))
# Check cors
# Standard Pearson Correlations (ignores multilevel structure)
cor_matrix <- data %>%
select(Mean_Constraint, PTV_Gap, AP, DIFF_SD, PTV_SD, PTV_M) %>%
cor(use = "pairwise.complete.obs")
print(cor_matrix)
View(data)
